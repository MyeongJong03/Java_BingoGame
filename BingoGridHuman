
import java.awt.RenderingHints;
import java.io.File;
import java.io.FileNotFoundException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Font;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.awt.Color;

//사용자의 빙고판

@SuppressWarnings("serial")
public class BingoGridHuman extends BingoGrid
{
    public BingoGridHuman() {
        super();        
        if( NSIZE== 7) {
        	indentX = 30;
            indentY = 150;
        }
        else if( NSIZE== 6) {
        	indentX = 70;
            indentY = 180;
        }
        else {
        	indentX = 120;
            indentY = 210;
        }
        initializeGrid();
    }
    
    //빙고판의 각 칸의 정보를 업데이트/제공
    public void highlightSquare() {
        for (int x : BingoNumbers.numbers) {
            for (int row = 0; row < NSIZE; row++) {
                for (int col = 0; col < NSIZE; col++) {
                    if (x == grid[row][col].getValue()) {
                        grid[row][col].setStatus(true);
                        grid[row][col].setIsClicked(true);
                    }
                }
            }
        }
        for (int x : BingoNumbers.pnumbers) {
            for (int row = 0; row < NSIZE; row++) {
                for (int col = 0; col < NSIZE; col++) {
                    if (x == grid[row][col].getValue()) {
                        grid[row][col].setStatus(true);
                        grid[row][col].setIsClicked(true);
                    }
                }
            }
        }
    }

    
    //판에 있는 단어가 불린다면 그 칸의 정보를 업데이트
    public void isCalled() {  
        for (int x : BingoNumbers.numbers) {
            for (int row = 0; row < NSIZE; row++) {
                for (int col = 0; col < NSIZE; col++) {
                    if (x == grid[row][col].getValue()) {
                        grid[row][col].setStatus(true);
                    }
                }
            }
        }
        for (int x : BingoNumbers.pnumbers) {
            for (int row = 0; row < NSIZE; row++) {
                for (int col = 0; col < NSIZE; col++) {
                    if (x == grid[row][col].getValue()) {
                        grid[row][col].setStatus(true);
                    }
                }
            }
        }
    }
    
    
    
    //단어 넣어주는 역할
    private int number=0;
    private Map<Integer, Quiz> voc = new HashMap<>();
    
    void addWord(Quiz quiz ) {
		voc.put(number++, quiz);
	}

    void makeVoc() {

		try (Scanner scan = new Scanner(new File("quiz.txt"))) {
			while (scan.hasNextLine()) {
				String str = scan.nextLine();
				String[] temp = str.split("\t");
				this.addWord(new Quiz(temp[0].trim(), temp[1].trim()));
			}

		} catch (FileNotFoundException e) { 
			System.out.println("\n파일명을 확인하세요.");
		}
	}
    

    //빙고판을 그려주는 역할
    public void paintComponent(Graphics g) {    
    	makeVoc();
        Graphics2D g2 = (Graphics2D) g;

        //안티앨리어싱을 이용해 글자를 쓰기 위함
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        int fontSize = 25; //많이 사용할 것 같은 기본 폰트를 저장
        Font font = new Font("SansSerif", Font.PLAIN, fontSize);

        int letterFont = 40; //많이 쓸 거 같은 큰 기본 폰트를 저장
        Font font2 = new Font("SansSerif", Font.BOLD, letterFont);

        g2.setFont(font);

        //빙고판을 그리는 부분 
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid.length; col++) {
                BingoSquare square = grid[row][col];

                g2.draw(square);

                //단어가 불린 칸을 칠해주는 부분
                if (square.getIsClicked() ) {
                    g2.setColor(Color.YELLOW);
                    if (square.getIsWinner()) {
                        g2.setColor(Color.GREEN);
                    }
                    g2.fill(square);                    
                    g2.setColor(Color.BLACK);
                    g2.draw(square);
                }

                int value = grid[row][col].getValue();
                int xCoord = (int)square.getX() + (SQUARE_SIZE / 4)-8;
                int yCoord = (int)square.getY() + (SQUARE_SIZE / 2) + (SQUARE_SIZE / 8)-5;
                if (value < 40) {
                	g2.setFont(new Font("SansSerif", Font.PLAIN, 13));
                	g2.drawString(voc.get(value).eng, xCoord, yCoord);
                }
                else {
                	g2.setFont(new Font("SansSerif", Font.PLAIN, 11));
                	g2.drawString(voc.get(value).eng, xCoord, yCoord);
                }
                

                //칸을 나타내줄 A~ 알파벳을 그려주는 부분
                if (row == 0) { 
                    g2.setFont(font2);
                    g2.drawString(BINGO[col], (int)square.getX() + (SQUARE_SIZE / 6), (int)square.getY() - (SQUARE_SIZE / 4) );
                    g2.setFont(font);
                }

                //사용자의 판을 알려주는 Player를 그려주는 부분
                if (row == grid.length - 1 && col == 1) {
                	int plusposition = 50;
                    if(NSIZE == 7) plusposition = 100;
                    
                	if(checkWin()) {
                		if(BingoGame.WINNERCHECK == 0) {
                			g2.setFont(font2);
	                        g2.setColor(Color.RED);
	                        g2.drawString("Player", (int)square.getX() + SQUARE_SIZE / 4 - 5 + plusposition, (int)square.getY() + SQUARE_SIZE + ((SQUARE_SIZE / 3) * 2) - 20);
	                        g2.drawString("무승부", 600, 50);
	                        g2.setFont(new Font("SansSerif", Font.PLAIN, 15));
	                        g2.setColor(Color.BLUE);
	                        g2.drawString("다시 하시려면 [reset], 종료하시려면 [exit]을 눌러주세요", 450, 800);
	                        g2.setFont(font);
	                        g2.setColor(Color.BLACK);
                		}else {
	                		g2.setFont(font2);
	                        g2.setColor(Color.RED);
	                        g2.drawString("Player", (int)square.getX() + SQUARE_SIZE / 4 - 5 + plusposition, (int)square.getY() + SQUARE_SIZE + ((SQUARE_SIZE / 3) * 2) - 20);
	                        g2.drawString("사용자 승리", 540, 50);
	                        g2.setFont(new Font("SansSerif", Font.PLAIN, 15));
	                        g2.setColor(Color.BLUE);
	                        g2.drawString("다시 하시려면 [reset], 종료하시려면 [exit]을 눌러주세요", 450, 800);
	                        g2.setFont(font);
	                        g2.setColor(Color.BLACK);
                		}
                	}
                	else {
                		
	                    g2.setFont(font2);
	                    g2.setColor(Color.LIGHT_GRAY);
	                    g2.drawString("Player", (int)square.getX() + SQUARE_SIZE / 4 - 5 + plusposition, (int)square.getY() + SQUARE_SIZE + ((SQUARE_SIZE / 3) * 2) - 20);
	                    
	                    g2.setFont(font);
	                    g2.setColor(Color.BLACK);
                	}
                }
            }
        }
    }
}
